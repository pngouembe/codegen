' Uml taken from https://github.com/masdikaid/rakamin-final-project/blob/cc463a45daf64bd9ebb26c2b8cb4d10aabd8bacd/documentation/class.plantuml for test purposes
@startuml

note "This is a floating note" as N1
note "This note is connected\nto several objects." as N2

note top of Object
  In java, <size:18>every</size> <u>class</u>
  <b>extends</b>
  <i>this</i> one.
end note

' package Transaction  {

    class TransactionEntity {
        ID : uint32_t
        CreatedAt : time
        UpdatedAt : time
        DeletedAt : time
        Customer_id : uint32_t
        Customer : CustomerEntity
        Agent_id : uint32_t
        Agent : AgentEntity
        Address : std.string
        Province : std.string
        City : std.string
        District : std.string
        Latitude : decimal
        Longitude : decimal
        Services : std.string
        Type : std.string
        Amount : uint32_t
        Status : uint32_t
        Rating : uint32_t
    }

note top of Object
  In java, <size:18>every</size> <u>class</u>
  <b>extends</b>
  <i>this</i> one.
end note

    interface TransactionContractInterface {
        TransactionContractInterface FromEntity(ent TransactionEntity)
        TransactionEntity ToEntity()
    }

    class TransactionContract {
        ID : uint32_t
        Status : int
        CreatedAt : time
        Services : std.string
        Type : std.string
        Amount : uint32_t
        Rating : uint32_t
        Agent : AgentContract
        Customer : CustomerContract
    }

    interface TransactionRepositoryInterface {
        TransactionEntity* GetAll()
        TransactionEntity* GetAllByID(usertype std.string, id uint32_t)
        TransactionEntity* GetByID(id uint32_t)
        TransactionEntity* Create(ent TransactionEntity*)
        TransactionEntity* Update(ent TransactionEntity*)
        error Delete(ent TransactionEntity*)
    }



    class Transaction {
        id : int
        customerId : Customer
        agentId : Agent
        locationId : Location
        type : char
        amount : int
        status : int
        ratting : int
    }

    TransactionInterface <|-- Transaction

' }

' package User  {

    interface UserInterface {
        GetAll(UserInterface, error)
        GetByID(UserInterface, error)
    }

    class User {
        id : int
        loginId : Login
        name : std.string
        phone_number : std.string
    }

    class Customer {
    }

    class Agent {
        outletName : std.string
        locationId : int
        GetByLocation(city) (*Agent, error)
    }

    UserInterface <|-- User
    User <|-- Customer
    User <|-- Agent

' }

' Package Auth  {

    interface LoginInterface {
        error Login(username, password, &User)
        error Logout(token)
    }

    interface SessionInterface {
        error Create(User, token)
        error Validate(token, &User)
        error Remove(token)
    }

    class Login {
        id : int
        username : std.string
        password : std.string
        loginAs : int
        lastLogin : time.Time
    }

    class Session {
        id : int
        loginId : Login
        token : std.string
        expiredAt : time.Time
    }

    LoginInterface <|-- Login
    SessionInterface <|-- Session

' }

' package Location {

    interface LocationInterface
    {
        error GetLocationByLogin(Login, LocationInterface*)
    }

    class Location {
        id : int
        createById : Login
        address : std.string
        province : std.string
        city : std.string
        district : std.string
        latitude : float32_t
        longitude : float32_t
    }

    LocationInterface <|-- Location
' }

Transaction o--* Customer
Transaction o--* Agent
Transaction o--* Location
Login *--* Customer
Login *--* Agent
Location *--o Agent
Login *--o Session
Login *--o Location

@enduml
