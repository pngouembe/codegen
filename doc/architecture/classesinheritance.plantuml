@startuml

!include ./interfaces.plantuml


together {
!startsub FACTORY_CLASSES
class "LanguageSpecificParser" as LSParser {
    + LanguageSpecificParser(input_file)
    + string[] get_classes()
    + string[] get_functions()
}

LSParser ..|> Parser

class "LanguageSpecificClassFactory" as LSClassFactory{
    + ClassProduct create_class(class_string)
}

LSClassFactory ..|> ClassFactory

class "LanguageSpecificFunctionFactory" as LSFunctionFactory implements FunctionFactory {
    + FunctionProduct create_function(function_sting)
}

class "LanguageSpecificAttributeFactory" as LSAttributeFactory implements AttributeFactory {
    + AttributeProduct create_attribute(attribute_string)
}
class "LanguageSpecificArgumentFactory" as LSArgumentFactory implements ArgumentFactory {
    + ArgumentProduct create_argument(argument_string)
}
!endsub
}

together {
!startsub PRODUCT_CLASSES
    class "LanguageSpecificClassProduct" as LSClassProduct implements ClassProduct{
        + name
        + attributes[]
        + functions[]
        + parents[]
        + documentation
    }

    class "LanguageSpecificFunctionProduct" as LSFunctionProduct implements FunctionProduct {
        + name
        + arguments[]
        + documentation
    }


    class "LanguageSpecificAttributeProduct" as LSAttributeProduct implements AttributeProduct {
        + name
        + type
    }


    class "LanguageSpecificArgumentProduct" as LSArgumentProduct implements ArgumentProduct {
        + name
        + type
        + getters
        + setters
    }
!endsub
}
@enduml
